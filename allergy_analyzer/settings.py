"""
Django settings for allergy_analyzer project.

Generated by 'django-admin startproject' using Django 5.1.6.
"""
import boto3
from botocore.exceptions import NoCredentialsError
import logging, os
import watchtower 
from watchtower import CloudWatchLogHandler #this is for cloudwatch logs
from pathlib import Path
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
AWS_LAMBDA_FUNCTION_NAME = "SymptomAnalysisLambda" #AWS lambda functionname for symptom analysis

SECRET_KEY = 'django-insecure-&&agd53()b1avuinha(52u7z%n$*g#x#jf&yku7p2en+3uwi69'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '2f521d3645d74cdab041e37bb264d2b3.vfs.cloud9.us-east-1.amazonaws.com',
    '127.0.0.1',
    'localhost',
    'allergyanalyzersystem-env.eba-eyus5yb4.us-east-1.elasticbeanstalk.com',
    '172.31.12.67',
    'awseb--awseb-6zaysprd7qba-702008610.us-east-1.elb.amazonaws.com',
    
    ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'user_management.apps.UserManagementConfig',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
]
CSRF_TRUSTED_ORIGINS = [
    "https://2f521d3645d74cdab041e37bb264d2b3.vfs.cloud9.us-east-1.amazonaws.com",
    "http://2f521d3645d74cdab041e37bb264d2b3.vfs.cloud9.us-east-1.amazonaws.com",
    "https://allergyanalyzersystem-env.eba-eyus5yb4.us-east-1.elasticbeanstalk.com",
    "http://allergyanalyzersystem-env.eba-eyus5yb4.us-east-1.elasticbeanstalk.com",
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "https://2f521d3645d74cdab041e37bb264d2b3.vfs.cloud9.us-east-1.amazonaws.com",
    "https://allergyanalyzersystem-env.eba-eyus5yb4.us-east-1.elasticbeanstalk.com"
]
CORS_ALLOW_CREDENTIALS = True #app requires authenticated API requests, so CORS must allow credentials.
ROOT_URLCONF = 'allergy_analyzer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'allergy_analyzer.wsgi.application'

LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = "/users/login/"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT ='static'
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#authentication settings to secure API
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

#below code is for Cloudwatch Integration

AWS_CLOUDWATCH_GROUP = "LogsForAllergyAnalyzer" #log group name
AWS_CLOUDWATCH_STREAM = "ApplicationLogs"
AWS_REGION = "us-east-1"

# # Initialize Boto3 CloudWatch Logs Client
# boto3_client = boto3.client("logs", region_name=AWS_REGION)
# # configuring logging below
# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "handlers": {
#         "watchtower": {
#             "level": "INFO",
#             "class": "watchtower.CloudWatchLogHandler",
#             "log_group_name": AWS_CLOUDWATCH_GROUP,
#             "stream_name": AWS_CLOUDWATCH_STREAM,
#         },
#     },
#     "loggers": {
#         "django": {
#             "handlers": ["watchtower"],
#             "level": "INFO",
#             "propagate": True,
#         },
#     },
# }
# #   Setup Logging
# try:
#     logging.basicConfig(level=logging.INFO)
#     logger = logging.getLogger("django")
#     logger.addHandler(watchtower.CloudWatchLogHandler(log_group=AWS_CLOUDWATCH_GROUP,stream_name=AWS_CLOUDWATCH_STREAM))
#     logger.info("CloudWatch logging configured successfully.")
# except Exception as e:
#     logging.error(f"Error configuring CloudWatch logging: {e}")
    

# AWS S3 Settings
AWS_STORAGE_BUCKET_NAME = 'allergy-analyzer-reports'  # Replace with your bucket name
 
#AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_REGION}.amazonaws.com' #used for static and media files 

# Media settings
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')